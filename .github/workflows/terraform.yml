name: CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - dev-ci

jobs:
  gen_ssh_key:
    runs-on: ubuntu-latest
    steps:
      - name: Generate SSH Key
        run: |
          mkdir .keys && cd .keys
          ssh-keygen -f vm_keys -q -t rsa -N "" && echo "Keys successfully generated"
        artifacts:
          name: ssh-keys
          expire_in: 1 day
          paths:
            - .keys

  provision:
    runs-on: ubuntu-latest
    env:
      TERRAFORM_VERSION: 1.5.7
      TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      TF_STATE_OBJECT: ${{ secrets.TF_STATE_OBJECT }}
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        run: |
          wget -O terraform.zip https://releases.hashicorp.com/terraform/${{ env.TERRAFORM_VERSION }}/terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip
          unzip terraform.zip
          sudo mv terraform /usr/local/bin/

      - name: Initialize Terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="prefix=${{ env.TF_STATE_OBJECT }}" \
            -backend-config="credentials=${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

  dry_run:
    runs-on: ubuntu-latest
    needs: gen_ssh_key
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.7

      - name: Validate Terraform Configuration
        run: terraform validate

      - name: Plan (Dry Run)
        run: terraform plan -lock=false

  merge_request:
    runs-on: ubuntu-latest
    needs: gen_ssh_key
    steps:
      - name: Merge Request
        run: |
          # Add GitHub-specific steps for handling merge requests here

  apply_changes:
    runs-on: ubuntu-latest
    needs: dry_run
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Apply Terraform Changes
        run: terraform apply -auto-approve

  ansible_config:
    runs-on: ubuntu-latest
    needs: apply_changes
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure Ansible
        run: |
          # Add steps to configure Ansible and install Nginx

  destroy_infrastructure:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Destroy Infrastructure
        run: terraform destroy -auto-approve
